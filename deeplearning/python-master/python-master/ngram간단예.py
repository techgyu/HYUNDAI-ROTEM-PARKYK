# n-gram을 이용하면 문장의 유사도를 확인할 수 있다.

def ngram(s, num):
    res = []
    slen = len(s) - num + 1
    for i in range(slen):
        ss = s[i:i+num]
        res.append(ss)
    return res

def diff_word(sa, sb, num):
    a = ngram(sa, num)
    print('a : ', a)
    b = ngram(sb, num)
    print('b : ', b)
    r = []
    cnt = 0
    for i in a:  # 첫 번째 두(세) 개의 단어로 분리된 단어를 모두, 첫 번째 두(세) 개의 단어로 분리된 단어와 비교하여 같으면 누적
        for j in b:
            if i == j:
                cnt += 1
                r.append(i)
    return cnt / len(a), r

a = "나는 강남에서 시원한 맥주를 마셨다."
b = "강남에서 마셨던 맥주는 시원했다고 나는 생각한다."

# 2-gram
r2, word2 = diff_word(a, b, 2)
print("2-gram에서 같은 확률:", r2, '\n같은 단어:',word2)

# 3-gram
r3, word3  = diff_word(a, b, 3)
print("3-gram에서 같은 확률:", r3, '\n같은 단어:',word3)

    # a :  ['나는', '는 ', ' 강', '강남', '남에', '에서', '서 ', ' 시', '시원', '원한', '한 ', ' 맥', '맥주', '주를', '를 ', ' 마', '마셨', '셨다', '다.']
    # b :  ['강남', '남에', '에서', '서 ', ' 마', '마셨', '셨던', '던 ', ' 맥', '맥주', '주는', '는 ', ' 시', '시원', '원했', '했다', '다고', '고 ', ' 나', '나는', '는 ', ' 생', '생각', '각한', '한다', '다.']
    # 2-gram에서 같은 확률: 0.7368421052631579 
    # 같은 단어: ['나는', '는 ', '는 ', '강남', '남에', '에서', '서 ', ' 시', '시원', ' 맥', '맥주', ' 마', '마셨', '다.']
    # ----------------------------------------------------------
    # a :  ['나는 ', '는 강', ' 강남', '강남에', '남에서', '에서 ', '서 시', ' 시원', '시원한', '원한 ', '한 맥', ' 맥주', '맥주를', '주를 ', '를 마', ' 마셨', '마셨다', '셨다.']
    # b :  ['강남에', '남에서', '에서 ', '서 마', ' 마셨', '마셨던', '셨던 ', '던 맥', ' 맥주', '맥주는', '주는 ', '는 시', ' 시원', '시원했', '원했다', '했다고', '다고 ', '고 나', ' 나는', '나는 ', '는 생', ' 생각', '생각한', '각한다', '한다.']
    # 3-gram에서 같은 확률: 0.3888888888888889 
    # 같은 단어: ['나는 ', '강남에', '남에서', '에서 ', ' 시원', ' 맥주', ' 마셨']
